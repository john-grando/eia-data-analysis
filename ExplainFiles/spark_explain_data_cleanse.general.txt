== Parsed Logical Plan ==
'Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, date_split#87, value#103, year#120, 'date_split[0] AS month#138]
+- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, date_split#87, value#103, date_split#87[0] AS year#120]
   +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, date_split#87, data_exploded#58[1] AS value#103]
      +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, split(regexp_replace(date#72, ([0-9]{4})(?!$), $1, ), , , -1) AS date_split#87]
         +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, data_exploded#58[0] AS date#72]
            +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58]
               +- Generate explode(data#9), false, [data_exploded#58]
                  +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, regexp_replace(series_id#16, ^[^.]+\.([^.]+)(\..*)*, $1) AS series_id#44, start#17, units#18]
                     +- GlobalLimit 200
                        +- LocalLimit 200
                           +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, regexp_replace(name#13, ^(.*)(, Monthly)$, $1) AS name#31, notes#14, parent_category_id#15, series_id#16, start#17, units#18]
                              +- Filter (f#11 = M)
                                 +- Relation[category_id#7,childseries#8,data#9,end#10,f#11,last_updated#12,name#13,notes#14,parent_category_id#15,series_id#16,start#17,units#18] json

== Analyzed Logical Plan ==
category_id: string, childseries: array<string>, data: array<array<string>>, end: string, f: string, last_updated: timestamp, name: string, notes: string, parent_category_id: string, series_id: string, start: string, units: string, data_exploded: array<string>, date: string, date_split: array<string>, value: string, year: string, month: string
Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, date_split#87, value#103, year#120, date_split#87[0] AS month#138]
+- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, date_split#87, value#103, date_split#87[0] AS year#120]
   +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, date_split#87, data_exploded#58[1] AS value#103]
      +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, split(regexp_replace(date#72, ([0-9]{4})(?!$), $1, ), , , -1) AS date_split#87]
         +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, data_exploded#58[0] AS date#72]
            +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58]
               +- Generate explode(data#9), false, [data_exploded#58]
                  +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, regexp_replace(series_id#16, ^[^.]+\.([^.]+)(\..*)*, $1) AS series_id#44, start#17, units#18]
                     +- GlobalLimit 200
                        +- LocalLimit 200
                           +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, regexp_replace(name#13, ^(.*)(, Monthly)$, $1) AS name#31, notes#14, parent_category_id#15, series_id#16, start#17, units#18]
                              +- Filter (f#11 = M)
                                 +- Relation[category_id#7,childseries#8,data#9,end#10,f#11,last_updated#12,name#13,notes#14,parent_category_id#15,series_id#16,start#17,units#18] json

== Optimized Logical Plan ==
Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, data_exploded#58[0] AS date#72, split(regexp_replace(data_exploded#58[0], ([0-9]{4})(?!$), $1, ), , , -1) AS date_split#87, data_exploded#58[1] AS value#103, split(regexp_replace(data_exploded#58[0], ([0-9]{4})(?!$), $1, ), , , -1)[0] AS year#120, split(regexp_replace(data_exploded#58[0], ([0-9]{4})(?!$), $1, ), , , -1)[0] AS month#138]
+- Generate explode(data#9), false, [data_exploded#58]
   +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, regexp_replace(series_id#16, ^[^.]+\.([^.]+)(\..*)*, $1) AS series_id#44, start#17, units#18]
      +- GlobalLimit 200
         +- LocalLimit 200
            +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, regexp_replace(name#13, ^(.*)(, Monthly)$, $1) AS name#31, notes#14, parent_category_id#15, series_id#16, start#17, units#18]
               +- Filter (isnotnull(f#11) AND (f#11 = M))
                  +- Relation[category_id#7,childseries#8,data#9,end#10,f#11,last_updated#12,name#13,notes#14,parent_category_id#15,series_id#16,start#17,units#18] json

== Physical Plan ==
*(3) Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, data_exploded#58[0] AS date#72, split(regexp_replace(data_exploded#58[0], ([0-9]{4})(?!$), $1, ), , , -1) AS date_split#87, data_exploded#58[1] AS value#103, split(regexp_replace(data_exploded#58[0], ([0-9]{4})(?!$), $1, ), , , -1)[0] AS year#120, split(regexp_replace(data_exploded#58[0], ([0-9]{4})(?!$), $1, ), , , -1)[0] AS month#138]
+- Generate explode(data#9), [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18], false, [data_exploded#58]
   +- *(2) Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, regexp_replace(series_id#16, ^[^.]+\.([^.]+)(\..*)*, $1) AS series_id#44, start#17, units#18]
      +- *(2) GlobalLimit 200
         +- Exchange SinglePartition, true, [id=#40]
            +- *(1) LocalLimit 200
               +- *(1) Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, regexp_replace(name#13, ^(.*)(, Monthly)$, $1) AS name#31, notes#14, parent_category_id#15, series_id#16, start#17, units#18]
                  +- *(1) Filter (isnotnull(f#11) AND (f#11 = M))
                     +- FileScan json [category_id#7,childseries#8,data#9,end#10,f#11,last_updated#12,name#13,notes#14,parent_category_id#15,series_id#16,start#17,units#18] Batched: false, DataFilters: [isnotnull(f#11), (f#11 = M)], Format: JSON, Location: InMemoryFileIndex[hdfs://localhost:9000/EIATotal/TOTAL.json], PartitionFilters: [], PushedFilters: [IsNotNull(f), EqualTo(f,M)], ReadSchema: struct<category_id:string,childseries:array<string>,data:array<array<string>>,end:string,f:string...
