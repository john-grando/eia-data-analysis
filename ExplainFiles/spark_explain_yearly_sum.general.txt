== Parsed Logical Plan ==
'Sort ['year ASC NULLS FIRST, 'series_id ASC NULLS FIRST], true
+- Aggregate [year#120, series_id#44], [year#120, series_id#44, sum(cast(value#103 as double)) AS value#176, collect_set(name#31, 0, 0)[0] AS name#178, collect_set(units#18, 0, 0)[0] AS units#180]
   +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, date_split#87, value#103, year#120, date_split#87[0] AS month#138]
      +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, date_split#87, value#103, date_split#87[0] AS year#120]
         +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, date_split#87, data_exploded#58[1] AS value#103]
            +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, split(regexp_replace(date#72, ([0-9]{4})(?!$), $1, ), , , -1) AS date_split#87]
               +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, data_exploded#58[0] AS date#72]
                  +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58]
                     +- Generate explode(data#9), false, [data_exploded#58]
                        +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, regexp_replace(series_id#16, ^[^.]+\.([^.]+)(\..*)*, $1) AS series_id#44, start#17, units#18]
                           +- GlobalLimit 200
                              +- LocalLimit 200
                                 +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, regexp_replace(name#13, ^(.*)(, Monthly)$, $1) AS name#31, notes#14, parent_category_id#15, series_id#16, start#17, units#18]
                                    +- Filter (f#11 = M)
                                       +- Relation[category_id#7,childseries#8,data#9,end#10,f#11,last_updated#12,name#13,notes#14,parent_category_id#15,series_id#16,start#17,units#18] json

== Analyzed Logical Plan ==
year: string, series_id: string, value: double, name: string, units: string
Sort [year#120 ASC NULLS FIRST, series_id#44 ASC NULLS FIRST], true
+- Aggregate [year#120, series_id#44], [year#120, series_id#44, sum(cast(value#103 as double)) AS value#176, collect_set(name#31, 0, 0)[0] AS name#178, collect_set(units#18, 0, 0)[0] AS units#180]
   +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, date_split#87, value#103, year#120, date_split#87[0] AS month#138]
      +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, date_split#87, value#103, date_split#87[0] AS year#120]
         +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, date_split#87, data_exploded#58[1] AS value#103]
            +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, date#72, split(regexp_replace(date#72, ([0-9]{4})(?!$), $1, ), , , -1) AS date_split#87]
               +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58, data_exploded#58[0] AS date#72]
                  +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, series_id#44, start#17, units#18, data_exploded#58]
                     +- Generate explode(data#9), false, [data_exploded#58]
                        +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, name#31, notes#14, parent_category_id#15, regexp_replace(series_id#16, ^[^.]+\.([^.]+)(\..*)*, $1) AS series_id#44, start#17, units#18]
                           +- GlobalLimit 200
                              +- LocalLimit 200
                                 +- Project [category_id#7, childseries#8, data#9, end#10, f#11, last_updated#12, regexp_replace(name#13, ^(.*)(, Monthly)$, $1) AS name#31, notes#14, parent_category_id#15, series_id#16, start#17, units#18]
                                    +- Filter (f#11 = M)
                                       +- Relation[category_id#7,childseries#8,data#9,end#10,f#11,last_updated#12,name#13,notes#14,parent_category_id#15,series_id#16,start#17,units#18] json

== Optimized Logical Plan ==
Sort [year#120 ASC NULLS FIRST, series_id#44 ASC NULLS FIRST], true
+- Aggregate [year#120, series_id#44], [year#120, series_id#44, sum(cast(value#103 as double)) AS value#176, collect_set(name#31, 0, 0)[0] AS name#178, collect_set(units#18, 0, 0)[0] AS units#180]
   +- Project [name#31, series_id#44, units#18, data_exploded#58[1] AS value#103, split(regexp_replace(data_exploded#58[0], ([0-9]{4})(?!$), $1, ), , , -1)[0] AS year#120]
      +- Generate explode(data#9), [0], false, [data_exploded#58]
         +- Project [data#9, name#31, regexp_replace(series_id#16, ^[^.]+\.([^.]+)(\..*)*, $1) AS series_id#44, units#18]
            +- GlobalLimit 200
               +- LocalLimit 200
                  +- Project [data#9, regexp_replace(name#13, ^(.*)(, Monthly)$, $1) AS name#31, series_id#16, units#18]
                     +- Filter (isnotnull(f#11) AND (f#11 = M))
                        +- Relation[category_id#7,childseries#8,data#9,end#10,f#11,last_updated#12,name#13,notes#14,parent_category_id#15,series_id#16,start#17,units#18] json

== Physical Plan ==
*(4) Sort [year#120 ASC NULLS FIRST, series_id#44 ASC NULLS FIRST], true, 0
+- ObjectHashAggregate(keys=[year#120, series_id#44], functions=[sum(cast(value#103 as double)), collect_set(name#31, 0, 0), collect_set(units#18, 0, 0)], output=[year#120, series_id#44, value#176, name#178, units#180])
   +- ObjectHashAggregate(keys=[year#120, series_id#44], functions=[partial_sum(cast(value#103 as double)), partial_collect_set(name#31, 0, 0), partial_collect_set(units#18, 0, 0)], output=[year#120, series_id#44, sum#189, buf#190, buf#191])
      +- *(3) Project [name#31, series_id#44, units#18, data_exploded#58[1] AS value#103, split(regexp_replace(data_exploded#58[0], ([0-9]{4})(?!$), $1, ), , , -1)[0] AS year#120]
         +- Generate explode(data#9), [name#31, series_id#44, units#18], false, [data_exploded#58]
            +- *(2) Project [data#9, name#31, regexp_replace(series_id#16, ^[^.]+\.([^.]+)(\..*)*, $1) AS series_id#44, units#18]
               +- *(2) GlobalLimit 200
                  +- Exchange SinglePartition, true, [id=#100]
                     +- *(1) LocalLimit 200
                        +- *(1) Project [data#9, regexp_replace(name#13, ^(.*)(, Monthly)$, $1) AS name#31, series_id#16, units#18]
                           +- *(1) Filter (isnotnull(f#11) AND (f#11 = M))
                              +- FileScan json [data#9,f#11,name#13,series_id#16,units#18] Batched: false, DataFilters: [isnotnull(f#11), (f#11 = M)], Format: JSON, Location: InMemoryFileIndex[hdfs://localhost:9000/EIATotal/TOTAL.json], PartitionFilters: [], PushedFilters: [IsNotNull(f), EqualTo(f,M)], ReadSchema: struct<data:array<array<string>>,f:string,name:string,series_id:string,units:string>
