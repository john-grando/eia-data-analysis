== Parsed Logical Plan ==
Project [CASE WHEN (copyright#0 = ) THEN cast(null as string) WHEN (copyright#0 = null) THEN cast(null as string) ELSE copyright#0 END AS copyright#605, CASE WHEN (description#1 = ) THEN cast(null as string) WHEN (description#1 = null) THEN cast(null as string) ELSE description#1 END AS description#606, end#142, CASE WHEN (f#3 = ) THEN cast(null as string) WHEN (f#3 = null) THEN cast(null as string) ELSE f#3 END AS f#607, CASE WHEN (geography#4 = ) THEN cast(null as string) WHEN (geography#4 = null) THEN cast(null as string) ELSE geography#4 END AS geography#608, CASE WHEN (iso3166#5 = ) THEN cast(null as string) WHEN (iso3166#5 = null) THEN cast(null as string) ELSE iso3166#5 END AS iso3166#609, lat#97, lon#112, CASE WHEN (name#9 = ) THEN cast(null as string) WHEN (name#9 = null) THEN cast(null as string) ELSE name#9 END AS name#610, CASE WHEN (source#10 = ) THEN cast(null as string) WHEN (source#10 = null) THEN cast(null as string) ELSE source#10 END AS source#611, start#127, CASE WHEN (units#12 = ) THEN cast(null as string) WHEN (units#12 = null) THEN cast(null as string) ELSE units#12 END AS units#612, last_updated#82, CASE WHEN (series_id#14 = ) THEN cast(null as string) WHEN (series_id#14 = null) THEN cast(null as string) ELSE series_id#14 END AS series_id#613, CASE WHEN (state#157 = ) THEN cast(null as string) WHEN (state#157 = null) THEN cast(null as string) ELSE state#157 END AS state#614]
+- Project [copyright#0, description#1, end#142, f#3, geography#4, iso3166#5, lat#97, lon#112, name#9, source#10, start#127, units#12, last_updated#82, series_id#14, state#157]
   +- Project [copyright#0, description#1, end#142, f#3, geography#4, iso3166#5, lat#97, lon#112, name#9, source#10, start#127, units#12, last_updated#82, series_id#14, state#157, split(name#9, :, -1) AS split_name#558]
      +- Filter NOT name#9 RLIKE Fuel consumption MMBtu|Net generation|Receipts of fossil fuels by electricity plants
         +- Project [copyright#0, description#1, end#142, f#3, geography#4, iso3166#5, lat#97, lon#112, name#9, source#10, start#127, units#12, last_updated#82, series_id#14, regexp_extract(iso3166#5, .*-(.*)$, 1) AS state#157]
            +- Project [copyright#0, description#1, cast(end#2 as int) AS end#142, f#3, geography#4, iso3166#5, lat#97, lon#112, name#9, source#10, start#127, units#12, last_updated#82, series_id#14]
               +- Project [copyright#0, description#1, end#2, f#3, geography#4, iso3166#5, lat#97, lon#112, name#9, source#10, cast(start#11 as int) AS start#127, units#12, last_updated#82, series_id#14]
                  +- Project [copyright#0, description#1, end#2, f#3, geography#4, iso3166#5, lat#97, cast(lat#97 as double) AS lon#112, name#9, source#10, start#11, units#12, last_updated#82, series_id#14]
                     +- Project [copyright#0, description#1, end#2, f#3, geography#4, iso3166#5, cast(lat#6 as double) AS lat#97, lon#8, name#9, source#10, start#11, units#12, last_updated#82, series_id#14]
                        +- Project [copyright#0, description#1, end#2, f#3, geography#4, iso3166#5, lat#6, lon#8, name#9, source#10, start#11, units#12, to_timestamp('last_updated, Some(yyyy-MM-dd'T'HH:mm:ssXXX)) AS last_updated#82, series_id#14]
                           +- Filter isnotnull(series_id#14)
                              +- Project [copyright#0, description#1, end#2, f#3, geography#4, iso3166#5, lat#6, lon#8, name#9, source#10, start#11, units#12, last_updated#13, series_id#14]
                                 +- Filter (f#3 = M)
                                    +- Relation[copyright#0,description#1,end#2,f#3,geography#4,iso3166#5,lat#6,latlon#7,lon#8,name#9,source#10,start#11,units#12,last_updated#13,series_id#14,data#15] json

== Analyzed Logical Plan ==
copyright: string, description: string, end: int, f: string, geography: string, iso3166: string, lat: double, lon: double, name: string, source: string, start: int, units: string, last_updated: timestamp, series_id: string, state: string
Project [CASE WHEN (copyright#0 = ) THEN cast(null as string) WHEN (copyright#0 = null) THEN cast(null as string) ELSE copyright#0 END AS copyright#605, CASE WHEN (description#1 = ) THEN cast(null as string) WHEN (description#1 = null) THEN cast(null as string) ELSE description#1 END AS description#606, end#142, CASE WHEN (f#3 = ) THEN cast(null as string) WHEN (f#3 = null) THEN cast(null as string) ELSE f#3 END AS f#607, CASE WHEN (geography#4 = ) THEN cast(null as string) WHEN (geography#4 = null) THEN cast(null as string) ELSE geography#4 END AS geography#608, CASE WHEN (iso3166#5 = ) THEN cast(null as string) WHEN (iso3166#5 = null) THEN cast(null as string) ELSE iso3166#5 END AS iso3166#609, lat#97, lon#112, CASE WHEN (name#9 = ) THEN cast(null as string) WHEN (name#9 = null) THEN cast(null as string) ELSE name#9 END AS name#610, CASE WHEN (source#10 = ) THEN cast(null as string) WHEN (source#10 = null) THEN cast(null as string) ELSE source#10 END AS source#611, start#127, CASE WHEN (units#12 = ) THEN cast(null as string) WHEN (units#12 = null) THEN cast(null as string) ELSE units#12 END AS units#612, last_updated#82, CASE WHEN (series_id#14 = ) THEN cast(null as string) WHEN (series_id#14 = null) THEN cast(null as string) ELSE series_id#14 END AS series_id#613, CASE WHEN (state#157 = ) THEN cast(null as string) WHEN (state#157 = null) THEN cast(null as string) ELSE state#157 END AS state#614]
+- Project [copyright#0, description#1, end#142, f#3, geography#4, iso3166#5, lat#97, lon#112, name#9, source#10, start#127, units#12, last_updated#82, series_id#14, state#157]
   +- Project [copyright#0, description#1, end#142, f#3, geography#4, iso3166#5, lat#97, lon#112, name#9, source#10, start#127, units#12, last_updated#82, series_id#14, state#157, split(name#9, :, -1) AS split_name#558]
      +- Filter NOT name#9 RLIKE Fuel consumption MMBtu|Net generation|Receipts of fossil fuels by electricity plants
         +- Project [copyright#0, description#1, end#142, f#3, geography#4, iso3166#5, lat#97, lon#112, name#9, source#10, start#127, units#12, last_updated#82, series_id#14, regexp_extract(iso3166#5, .*-(.*)$, 1) AS state#157]
            +- Project [copyright#0, description#1, cast(end#2 as int) AS end#142, f#3, geography#4, iso3166#5, lat#97, lon#112, name#9, source#10, start#127, units#12, last_updated#82, series_id#14]
               +- Project [copyright#0, description#1, end#2, f#3, geography#4, iso3166#5, lat#97, lon#112, name#9, source#10, cast(start#11 as int) AS start#127, units#12, last_updated#82, series_id#14]
                  +- Project [copyright#0, description#1, end#2, f#3, geography#4, iso3166#5, lat#97, cast(lat#97 as double) AS lon#112, name#9, source#10, start#11, units#12, last_updated#82, series_id#14]
                     +- Project [copyright#0, description#1, end#2, f#3, geography#4, iso3166#5, cast(lat#6 as double) AS lat#97, lon#8, name#9, source#10, start#11, units#12, last_updated#82, series_id#14]
                        +- Project [copyright#0, description#1, end#2, f#3, geography#4, iso3166#5, lat#6, lon#8, name#9, source#10, start#11, units#12, to_timestamp('last_updated, Some(yyyy-MM-dd'T'HH:mm:ssXXX)) AS last_updated#82, series_id#14]
                           +- Filter isnotnull(series_id#14)
                              +- Project [copyright#0, description#1, end#2, f#3, geography#4, iso3166#5, lat#6, lon#8, name#9, source#10, start#11, units#12, last_updated#13, series_id#14]
                                 +- Filter (f#3 = M)
                                    +- Relation[copyright#0,description#1,end#2,f#3,geography#4,iso3166#5,lat#6,latlon#7,lon#8,name#9,source#10,start#11,units#12,last_updated#13,series_id#14,data#15] json

== Optimized Logical Plan ==
Project [CASE WHEN (copyright#0 = ) THEN null WHEN (copyright#0 = null) THEN null ELSE copyright#0 END AS copyright#605, CASE WHEN (description#1 = ) THEN null WHEN (description#1 = null) THEN null ELSE description#1 END AS description#606, cast(end#2 as int) AS end#142, CASE WHEN (f#3 = ) THEN null WHEN (f#3 = null) THEN null ELSE f#3 END AS f#607, CASE WHEN (geography#4 = ) THEN null WHEN (geography#4 = null) THEN null ELSE geography#4 END AS geography#608, CASE WHEN (iso3166#5 = ) THEN null WHEN (iso3166#5 = null) THEN null ELSE iso3166#5 END AS iso3166#609, cast(lat#6 as double) AS lat#97, cast(lat#6 as double) AS lon#112, CASE WHEN (name#9 = ) THEN null WHEN (name#9 = null) THEN null ELSE name#9 END AS name#610, CASE WHEN (source#10 = ) THEN null WHEN (source#10 = null) THEN null ELSE source#10 END AS source#611, cast(start#11 as int) AS start#127, CASE WHEN (units#12 = ) THEN null WHEN (units#12 = null) THEN null ELSE units#12 END AS units#612, gettimestamp(last_updated#13, yyyy-MM-dd'T'HH:mm:ssXXX, Some(America/New_York)) AS last_updated#82, CASE WHEN (series_id#14 = ) THEN null WHEN (series_id#14 = null) THEN null ELSE series_id#14 END AS series_id#613, CASE WHEN (regexp_extract(iso3166#5, .*-(.*)$, 1) = ) THEN null WHEN (regexp_extract(iso3166#5, .*-(.*)$, 1) = null) THEN null ELSE regexp_extract(iso3166#5, .*-(.*)$, 1) END AS state#614]
+- Filter ((((isnotnull(name#9) AND isnotnull(f#3)) AND (f#3 = M)) AND isnotnull(series_id#14)) AND NOT name#9 RLIKE Fuel consumption MMBtu|Net generation|Receipts of fossil fuels by electricity plants)
   +- Relation[copyright#0,description#1,end#2,f#3,geography#4,iso3166#5,lat#6,latlon#7,lon#8,name#9,source#10,start#11,units#12,last_updated#13,series_id#14,data#15] json

== Physical Plan ==
*(1) Project [CASE WHEN (copyright#0 = ) THEN null WHEN (copyright#0 = null) THEN null ELSE copyright#0 END AS copyright#605, CASE WHEN (description#1 = ) THEN null WHEN (description#1 = null) THEN null ELSE description#1 END AS description#606, cast(end#2 as int) AS end#142, CASE WHEN (f#3 = ) THEN null WHEN (f#3 = null) THEN null ELSE f#3 END AS f#607, CASE WHEN (geography#4 = ) THEN null WHEN (geography#4 = null) THEN null ELSE geography#4 END AS geography#608, CASE WHEN (iso3166#5 = ) THEN null WHEN (iso3166#5 = null) THEN null ELSE iso3166#5 END AS iso3166#609, cast(lat#6 as double) AS lat#97, cast(lat#6 as double) AS lon#112, CASE WHEN (name#9 = ) THEN null WHEN (name#9 = null) THEN null ELSE name#9 END AS name#610, CASE WHEN (source#10 = ) THEN null WHEN (source#10 = null) THEN null ELSE source#10 END AS source#611, cast(start#11 as int) AS start#127, CASE WHEN (units#12 = ) THEN null WHEN (units#12 = null) THEN null ELSE units#12 END AS units#612, gettimestamp(last_updated#13, yyyy-MM-dd'T'HH:mm:ssXXX, Some(America/New_York)) AS last_updated#82, CASE WHEN (series_id#14 = ) THEN null WHEN (series_id#14 = null) THEN null ELSE series_id#14 END AS series_id#613, CASE WHEN (regexp_extract(iso3166#5, .*-(.*)$, 1) = ) THEN null WHEN (regexp_extract(iso3166#5, .*-(.*)$, 1) = null) THEN null ELSE regexp_extract(iso3166#5, .*-(.*)$, 1) END AS state#614]
+- *(1) Filter ((((isnotnull(name#9) AND isnotnull(f#3)) AND (f#3 = M)) AND isnotnull(series_id#14)) AND NOT name#9 RLIKE Fuel consumption MMBtu|Net generation|Receipts of fossil fuels by electricity plants)
   +- FileScan json [copyright#0,description#1,end#2,f#3,geography#4,iso3166#5,lat#6,name#9,source#10,start#11,units#12,last_updated#13,series_id#14] Batched: false, DataFilters: [isnotnull(name#9), isnotnull(f#3), (f#3 = M), isnotnull(series_id#14), NOT name#9 RLIKE Fuel con..., Format: JSON, Location: InMemoryFileIndex[hdfs://localhost:9000/EIAElec/ELEC.json], PartitionFilters: [], PushedFilters: [IsNotNull(name), IsNotNull(f), EqualTo(f,M), IsNotNull(series_id)], ReadSchema: struct<copyright:string,description:string,end:string,f:string,geography:string,iso3166:string,la...
