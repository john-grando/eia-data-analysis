== Parsed Logical Plan ==
Project [CASE WHEN (category_id#0 = ) THEN cast(null as string) WHEN (category_id#0 = null) THEN cast(null as string) ELSE category_id#0 END AS category_id#53, CASE WHEN (f#1 = ) THEN cast(null as string) WHEN (f#1 = null) THEN cast(null as string) ELSE f#1 END AS f#54, CASE WHEN (name#2 = ) THEN cast(null as string) WHEN (name#2 = null) THEN cast(null as string) ELSE name#2 END AS name#55, CASE WHEN (notes#3 = ) THEN cast(null as string) WHEN (notes#3 = null) THEN cast(null as string) ELSE notes#3 END AS notes#56, CASE WHEN (parent_category_id#4 = ) THEN cast(null as string) WHEN (parent_category_id#4 = null) THEN cast(null as string) ELSE parent_category_id#4 END AS parent_category_id#57, CASE WHEN (units#5 = ) THEN cast(null as string) WHEN (units#5 = null) THEN cast(null as string) ELSE units#5 END AS units#58, CASE WHEN (end#6 = ) THEN cast(null as string) WHEN (end#6 = null) THEN cast(null as string) ELSE end#6 END AS end#59, CASE WHEN (start#7 = ) THEN cast(null as string) WHEN (start#7 = null) THEN cast(null as string) ELSE start#7 END AS start#60, CASE WHEN (series_id#8 = ) THEN cast(null as string) WHEN (series_id#8 = null) THEN cast(null as string) ELSE series_id#8 END AS series_id#61, CASE WHEN (childseries#32 = ) THEN cast(null as string) WHEN (childseries#32 = null) THEN cast(null as string) ELSE childseries#32 END AS childseries#62]
+- Project [category_id#0, f#1, name#2, notes#3, parent_category_id#4, units#5, end#6, start#7, series_id#8, concat_ws(, , childseries#10) AS childseries#32]
   +- Project [category_id#0, f#1, name#2, notes#3, parent_category_id#4, units#5, end#6, start#7, series_id#8, childseries#10]
      +- Filter (f#1 = M)
         +- Relation[category_id#0,f#1,name#2,notes#3,parent_category_id#4,units#5,end#6,start#7,series_id#8,data#9,childseries#10] json

== Analyzed Logical Plan ==
category_id: string, f: string, name: string, notes: string, parent_category_id: string, units: string, end: string, start: string, series_id: string, childseries: string
Project [CASE WHEN (category_id#0 = ) THEN cast(null as string) WHEN (category_id#0 = null) THEN cast(null as string) ELSE category_id#0 END AS category_id#53, CASE WHEN (f#1 = ) THEN cast(null as string) WHEN (f#1 = null) THEN cast(null as string) ELSE f#1 END AS f#54, CASE WHEN (name#2 = ) THEN cast(null as string) WHEN (name#2 = null) THEN cast(null as string) ELSE name#2 END AS name#55, CASE WHEN (notes#3 = ) THEN cast(null as string) WHEN (notes#3 = null) THEN cast(null as string) ELSE notes#3 END AS notes#56, CASE WHEN (parent_category_id#4 = ) THEN cast(null as string) WHEN (parent_category_id#4 = null) THEN cast(null as string) ELSE parent_category_id#4 END AS parent_category_id#57, CASE WHEN (units#5 = ) THEN cast(null as string) WHEN (units#5 = null) THEN cast(null as string) ELSE units#5 END AS units#58, CASE WHEN (end#6 = ) THEN cast(null as string) WHEN (end#6 = null) THEN cast(null as string) ELSE end#6 END AS end#59, CASE WHEN (start#7 = ) THEN cast(null as string) WHEN (start#7 = null) THEN cast(null as string) ELSE start#7 END AS start#60, CASE WHEN (series_id#8 = ) THEN cast(null as string) WHEN (series_id#8 = null) THEN cast(null as string) ELSE series_id#8 END AS series_id#61, CASE WHEN (childseries#32 = ) THEN cast(null as string) WHEN (childseries#32 = null) THEN cast(null as string) ELSE childseries#32 END AS childseries#62]
+- Project [category_id#0, f#1, name#2, notes#3, parent_category_id#4, units#5, end#6, start#7, series_id#8, concat_ws(, , childseries#10) AS childseries#32]
   +- Project [category_id#0, f#1, name#2, notes#3, parent_category_id#4, units#5, end#6, start#7, series_id#8, childseries#10]
      +- Filter (f#1 = M)
         +- Relation[category_id#0,f#1,name#2,notes#3,parent_category_id#4,units#5,end#6,start#7,series_id#8,data#9,childseries#10] json

== Optimized Logical Plan ==
Project [CASE WHEN (category_id#0 = ) THEN null WHEN (category_id#0 = null) THEN null ELSE category_id#0 END AS category_id#53, CASE WHEN (f#1 = ) THEN null WHEN (f#1 = null) THEN null ELSE f#1 END AS f#54, CASE WHEN (name#2 = ) THEN null WHEN (name#2 = null) THEN null ELSE name#2 END AS name#55, CASE WHEN (notes#3 = ) THEN null WHEN (notes#3 = null) THEN null ELSE notes#3 END AS notes#56, CASE WHEN (parent_category_id#4 = ) THEN null WHEN (parent_category_id#4 = null) THEN null ELSE parent_category_id#4 END AS parent_category_id#57, CASE WHEN (units#5 = ) THEN null WHEN (units#5 = null) THEN null ELSE units#5 END AS units#58, CASE WHEN (end#6 = ) THEN null WHEN (end#6 = null) THEN null ELSE end#6 END AS end#59, CASE WHEN (start#7 = ) THEN null WHEN (start#7 = null) THEN null ELSE start#7 END AS start#60, CASE WHEN (series_id#8 = ) THEN null WHEN (series_id#8 = null) THEN null ELSE series_id#8 END AS series_id#61, CASE WHEN (concat_ws(, , childseries#10) = ) THEN null WHEN (concat_ws(, , childseries#10) = null) THEN null ELSE concat_ws(, , childseries#10) END AS childseries#62]
+- Filter (isnotnull(f#1) AND (f#1 = M))
   +- Relation[category_id#0,f#1,name#2,notes#3,parent_category_id#4,units#5,end#6,start#7,series_id#8,data#9,childseries#10] json

== Physical Plan ==
*(1) Project [CASE WHEN (category_id#0 = ) THEN null WHEN (category_id#0 = null) THEN null ELSE category_id#0 END AS category_id#53, CASE WHEN (f#1 = ) THEN null WHEN (f#1 = null) THEN null ELSE f#1 END AS f#54, CASE WHEN (name#2 = ) THEN null WHEN (name#2 = null) THEN null ELSE name#2 END AS name#55, CASE WHEN (notes#3 = ) THEN null WHEN (notes#3 = null) THEN null ELSE notes#3 END AS notes#56, CASE WHEN (parent_category_id#4 = ) THEN null WHEN (parent_category_id#4 = null) THEN null ELSE parent_category_id#4 END AS parent_category_id#57, CASE WHEN (units#5 = ) THEN null WHEN (units#5 = null) THEN null ELSE units#5 END AS units#58, CASE WHEN (end#6 = ) THEN null WHEN (end#6 = null) THEN null ELSE end#6 END AS end#59, CASE WHEN (start#7 = ) THEN null WHEN (start#7 = null) THEN null ELSE start#7 END AS start#60, CASE WHEN (series_id#8 = ) THEN null WHEN (series_id#8 = null) THEN null ELSE series_id#8 END AS series_id#61, CASE WHEN (concat_ws(, , childseries#10) = ) THEN null WHEN (concat_ws(, , childseries#10) = null) THEN null ELSE concat_ws(, , childseries#10) END AS childseries#62]
+- *(1) Filter (isnotnull(f#1) AND (f#1 = M))
   +- FileScan json [category_id#0,f#1,name#2,notes#3,parent_category_id#4,units#5,end#6,start#7,series_id#8,childseries#10] Batched: false, DataFilters: [isnotnull(f#1), (f#1 = M)], Format: JSON, Location: InMemoryFileIndex[hdfs://localhost:9000/EIATotal/TOTAL.json], PartitionFilters: [], PushedFilters: [IsNotNull(f), EqualTo(f,M)], ReadSchema: struct<category_id:string,f:string,name:string,notes:string,parent_category_id:string,units:strin...
