== Parsed Logical Plan ==
Project [STATION#10L, avg(TEMP)#131 AS AVG_TEMP#135]
+- Aggregate [STATION#10L], [STATION#10L, avg(TEMP#16) AS avg(TEMP)#131]
   +- Project [STATION#10L, DATE#11, TEMP#16]
      +- Relation[STATION#10L,DATE#11,LATITUDE#12,LONGITUDE#13,ELEVATION#14,NAME#15,TEMP#16,TEMP_ATTRIBUTES#17,DEWP#18,DEWP_ATTRIBUTES#19,SLP#20,SLP_ATTRIBUTES#21,STP#22,STP_ATTRIBUTES#23,VISIB#24,VISIB_ATTRIBUTES#25,WDSP#26,WDSP_ATTRIBUTES#27,MXSPD#28,GUST#29,MAX#30,MAX_ATTRIBUTES#31,MIN#32,MIN_ATTRIBUTES#33,... 4 more fields] csv

== Analyzed Logical Plan ==
STATION: bigint, AVG_TEMP: double
Project [STATION#10L, avg(TEMP)#131 AS AVG_TEMP#135]
+- Aggregate [STATION#10L], [STATION#10L, avg(TEMP#16) AS avg(TEMP)#131]
   +- Project [STATION#10L, DATE#11, TEMP#16]
      +- Relation[STATION#10L,DATE#11,LATITUDE#12,LONGITUDE#13,ELEVATION#14,NAME#15,TEMP#16,TEMP_ATTRIBUTES#17,DEWP#18,DEWP_ATTRIBUTES#19,SLP#20,SLP_ATTRIBUTES#21,STP#22,STP_ATTRIBUTES#23,VISIB#24,VISIB_ATTRIBUTES#25,WDSP#26,WDSP_ATTRIBUTES#27,MXSPD#28,GUST#29,MAX#30,MAX_ATTRIBUTES#31,MIN#32,MIN_ATTRIBUTES#33,... 4 more fields] csv

== Optimized Logical Plan ==
Aggregate [STATION#10L], [STATION#10L, avg(TEMP#16) AS AVG_TEMP#135]
+- Project [STATION#10L, TEMP#16]
   +- Relation[STATION#10L,DATE#11,LATITUDE#12,LONGITUDE#13,ELEVATION#14,NAME#15,TEMP#16,TEMP_ATTRIBUTES#17,DEWP#18,DEWP_ATTRIBUTES#19,SLP#20,SLP_ATTRIBUTES#21,STP#22,STP_ATTRIBUTES#23,VISIB#24,VISIB_ATTRIBUTES#25,WDSP#26,WDSP_ATTRIBUTES#27,MXSPD#28,GUST#29,MAX#30,MAX_ATTRIBUTES#31,MIN#32,MIN_ATTRIBUTES#33,... 4 more fields] csv

== Physical Plan ==
*(2) HashAggregate(keys=[STATION#10L], functions=[avg(TEMP#16)], output=[STATION#10L, AVG_TEMP#135])
+- Exchange hashpartitioning(STATION#10L, 200)
   +- *(1) HashAggregate(keys=[STATION#10L], functions=[partial_avg(TEMP#16)], output=[STATION#10L, sum#140, count#141L])
      +- *(1) FileScan csv [STATION#10L,TEMP#16] Batched: false, Format: CSV, Location: InMemoryFileIndex[hdfs://localhost:9000/WeatherCSV/2020-47936099999.csv, hdfs://localhost:9000/We..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<STATION:bigint,TEMP:double>